@using Racemate.Web.Helpers.Html
@using Racemate.Web.Areas.User.ViewModels.Shared

@model Racemate.Web.Areas.User.ViewModels.Race.RaceDetailsViewModel
@{
    ViewBag.Title = Model.Name;

    const string Controller = "RaceDetails";
    
    // ATTENTION
    // Those bool variables have ONLY visual and representing purposes
    // They were omitted from the Model in order to avoid unnecessary polution and separate the logic
    bool isRaceValid = !Model.IsFinished && !Model.IsCanceled;
    bool isParticipant = Model.Participants.Any(p => p.Participant.UserName == this.User.Identity.Name);
    bool isKicked = Model.KickedRacers.Any(r => r == this.User.Identity.Name);
    bool isSpectator = Model.Spectators.Any(s => s.Name == this.User.Identity.Name);
    bool isOrganizer = Model.Organizer == this.User.Identity.Name;
    bool isRaceUpcoming = Model.DateTimeOfRace > DateTime.Now;
    bool isRaceInProgress = Model.DateTimeOfRace < DateTime.Now && DateTime.Now < Model.DateTimeOfRace.AddHours(Model.Duration);
    bool isRaceOver = DateTime.Now > Model.DateTimeOfRace.AddHours(Model.Duration);
    bool doesUserHaveSuitableCar = Model.UserCarSelect.Count() > 0;
    bool areThereFreePlaces = Model.FreeRacePositions > 0;
}

@if (isKicked)
{
    <div class="msg error">You were kicked from the race!</div>
}

@Html.ValidationSummary(true, String.Empty, new { @class = "msg-list error" })

<h2>
    <span>@ViewBag.Title</span>

    @if (isRaceValid && 
        isRaceUpcoming &&
        doesUserHaveSuitableCar &&
        areThereFreePlaces &&
        !isParticipant && !isSpectator && !isKicked)
    {
        using (Html.BeginForm("Join", Controller, FormMethod.Post, new { @class = "pull-right horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.EncryptedId)
        
            @Html.DropDownListFor(m => m.UserRaceCarId, Model.UserCarSelect, new { @class = "dark" })
            <input type="submit" class="green" value="JOIN RACE" />
        }
    }
    
    @if (isRaceValid && isParticipant && isRaceUpcoming && !isKicked)
    {
        <button class="pop-up-btn orange pull-right" data-window="leave">LEAVE</button>
    }
    @if (isRaceValid && isOrganizer && isRaceUpcoming)
    {
        <button class="pop-up-btn orange pull-right" data-window="cancel">CANCEL RACE</button>
    }
    else if (isRaceValid && isOrganizer && isRaceInProgress)
    {
        <button class="pop-up-btn green pull-right" data-window="finish">FINISH RACE</button>
    }
</h2>

<div class="holder">
    <section class="content">
        <div id="map-canvas" class="container"></div>
        <div id="chat" class="half container">
            <ul class="messages">
                <li><strong>Pesho:</strong> u got rekt m8</li>
                <li><strong>Pesho:</strong> u got rekt m8</li>
            </ul>
            <div class="input">
                <input type="text" placeholder="Write a chat message" size="35" class="dark" />
                <input type="submit" value="Send" class="dark" />
            </div>
        </div>
        <div class="half pad-right container">
            <h3>Description</h3>
            @if (String.IsNullOrEmpty(Model.Description))
            {
                <p class="grey">No description</p>
            }
            else
            {
                <p>@Model.Description</p>
            }

            @if (isRaceOver && (isParticipant || isSpectator))
            {
                <hr class="space" />
                <h3>Evaluate the Race</h3>
                <form>
                    <fieldset>
                        <div>
                            <label for="oragnization-pts">Organization Points</label>
                            <input id="oragnization-pts" type="number" />
                        </div>
                        <div>
                            <label for="safety-pts">Safety Points</label>
                            <input id="safety-pts" type="number" />
                        </div>
                        <div>
                            <input type="submit" class="green" value="Evaluate" />
                        </div>
                    </fieldset>
                </form>
            }
        </div>
    </section>
    <section class="side pad-right">
        <div class="container">
            @if (Model.PoliceAlerts > 0 && (isParticipant || isOrganizer || isSpectator))
            {
                <div class="msg error">@Model.PoliceAlerts police alert(s)</div>
            }
            <div id="race-countdown">--:--:--</div>
            @if (Model.DateTimeOfRace > DateTime.Now)
            {
                <p id="countdown-info">Time left to the start of the race</p>
            }
            else if (Model.DateTimeOfRace.AddHours(Model.Duration) > DateTime.Now)
            {
                <p id="countdown-info">Time left to the end of the race</p>
            }
            <hr />
            <h3 class="race-title">@Model.Type</h3>
            @Html.RaceTypeImage(Model.Type)
            <div id="race-status">
                @Html.RaceStatusTag(Model.DateTimeOfRace, Model.Duration, Model.IsFinished, Model.IsCanceled)
            </div>
            <h4 class="race-title">@Model.DateTimeOfRace</h4>
            <hr />
            @if (isRaceOver)
            {
                if (Model.Participants.Count > 0)
                {
                    @Html.Partial("_FinishPositionsTable", Model.Participants)
                    <hr />
                }

                if (Model.Spectators.Count > 0)
                {
                    <div id="evaluation">
                        <div>
                            <p>2342</p>
                            <p>Organization</p>
                        </div>
                        <div>
                            <p>2342</p>
                            <p>Safety</p>
                        </div>
                        <div>
                            <p>2342</p>
                            <p>Entertainment</p>
                        </div>
                    </div>
                    <hr />
                }
            }
            <table class="race-details">
                <tr>
                    <td><div class="rc-detail location"></div> Location</td>
                    <td>@Model.Address</td>
                </tr>
                <tr>
                    <td><div class="rc-detail distance"></div> Distance</td>
                    <td>@Model.Distance km</td>
                </tr>
                <tr>
                    <td><div class="rc-detail duration"></div> Duration</td>
                    <td>@Model.Duration hr</td>
                </tr>
                @if (Model.MoneyBet.HasValue)
                {
                    <tr>
                        <td><div class="rc-detail bet"></div> Bet</td>
                        <td>@Model.MoneyBet lv</td>
                    </tr>
                }
                <tr>
                    <td><div class="rc-detail organizer"></div> Organizer</td>
                    <td><a href="#">@Model.Organizer</a></td>
                </tr>
                <tr>
                    <td><div class="rc-detail racers"></div> Racers</td>
                    <td>@Model.Participants.Count (out of @Model.AvailableRacePositions)</td>
                </tr>
                <tr>
                    <td><div class="rc-detail spectators"></div> Spectators</td>
                    <td>@Model.Spectators.Count</td>
                </tr>
            </table>
        </div>
        <div class="container pad-top">
            <h4>Other Options</h4>
            <hr class="space" />
            @if (isRaceValid && isRaceUpcoming && !isParticipant && !isOrganizer && !isSpectator && !isKicked)
            {
                using (Html.BeginForm("Spectate", Controller, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.EncryptedId)

                    <input type="submit" class="green" value="Spectate" />
                }
            }
            else if (isRaceValid && isRaceInProgress && (isParticipant || isSpectator))
            {
                using (Html.BeginForm("AlertForPolice", Controller, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.EncryptedId)

                    <input type="submit" class="orange" value="Alert For Police" />
                }
            }
            else if (isRaceValid && isOrganizer && (isRaceUpcoming || isRaceInProgress))
            {
                using (Html.BeginForm("Kick", Controller, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.EncryptedId)
                    
                    @Html.DropDownListFor(m => m.KickUserId, Model.KickUserSelect, "-- select user --")
                    <input type="submit" class="orange" value="Kick" />
                }
            }
        </div>
    </section>
</div>
@if (isRaceValid && isOrganizer && isRaceOver)
{
    <h2>Set Positions</h2>
    <div id="set-positions" class="holder container">
        <div class="msg note">Please, set the finish positions and time for the racers. Be advised that the data must be confirmed from respective racer in order to be taken in count.</div>
        @using (Html.BeginForm("Positioning", Controller, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.EncryptedId)
            
            <fieldset>
                <div class="row">
                    @foreach (var participant in Model.Participants.Where(p => !p.IsKicked))
                    {
                        @Html.Partial("EditorTemplates/_PositionEvaluation", participant)
                    }
                </div>
                <div class="row">
                    <input type="submit" class="green" value="Set Positions" />
                </div>
            </fieldset>
        }
    </div>
}
@if (Model.Participants.Count > 0)
{
    <h2>Racers</h2>
    <div class="holder">
        @foreach (var racer in Model.Participants)
        {
            <div class="car-info container">
                <div class="member-thumb">
                    @Html.Partial("_MemberThumbCore", racer.Participant)
                </div>
                @Html.Partial("_CarDetailsCore", racer.RaceCar)
            </div>
        }
    </div>
}
<div id="pop-ups">
    @if (isRaceValid && isParticipant && isRaceUpcoming)
    {
        @Html.Partial("_PopUpWindow", new PopUpWindowViewModel 
        { 
            WindowId = "leave",
            Title = "Leave Race",
            Message = String.Format("Are you sure that you want to leave \"{0}\" race?", Model.Name),
            Controller = Controller,
            Action = "Leave",
            EncryptedId = Model.EncryptedId
        })
    }
    @if (isRaceValid && isOrganizer && isRaceUpcoming)
    {
        @Html.Partial("_PopUpWindow", new PopUpWindowViewModel
        {
            WindowId = "cancel",
            Title = String.Format("Cancel {0} Race", Model.Name),
            Message = "Are you sure that you want to cancel the race? Note that you can't restart it after that.",
            Controller = Controller,
            Action = "Cancel",
            EncryptedId = Model.EncryptedId
        })
    }
    else if (isRaceValid && isOrganizer && isRaceInProgress)
    {
        @Html.Partial("_PopUpWindow", new PopUpWindowViewModel
        {
            WindowId = "finish",
            Title = String.Format("Finish {0} Race", Model.Name),
            Message = "Do you want to finish (close) the race before its end time expires? Note that you can't restart it after that.",
            Controller = Controller,
            Action = "Finish",
            EncryptedId = Model.EncryptedId
        })
    }
</div>

@section styles {
    @Styles.Render("~/Content/raceDetails")
}

@section scripts {
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp"></script>
    @Scripts.Render("~/bundle/visualizeRoute")
}